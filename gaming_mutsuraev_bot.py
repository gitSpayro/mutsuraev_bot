import requests
import json
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# üîë API-–∫–ª—é—á OpenRouter
API_KEY = "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"

# üîë API-–∫–ª—é—á Telegram –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7965923857:AAE81U_myTerQMTxlnNJjM1-2j7xOISLu0c"

# üìå –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å DeepSeek R1 Free
MODEL = "deepseek/deepseek-r1:free"

# üìå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
GENERATION_PARAMS = {
    "temperature": 0.5,          # –ë–∞–ª–∞–Ω—Å —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    "top_p": 0.9,                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    "top_k": 1,                  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ ‚Üí –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    "repetition_penalty": 1.1,   # –°–Ω–∏–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–æ–≤
    "frequency_penalty": 0.5,    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ —Å–ª–æ–≤
    "presence_penalty": 0.2,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –Ω–æ–≤–∏–∑–Ω—ã
    "max_tokens": 512            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
}

# üìå –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞) –ø–æ —á–∞—Ç–∞–º
chat_histories = {}

def chat_request(chat_id, user_message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenRouter AI —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    # –ë–µ—Ä–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    chat_histories.setdefault(chat_id, [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    chat_histories[chat_id].append({"role": "user", "content": user_message})

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 6 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø–∞–º—è—Ç—å—é –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é)
    chat_histories[chat_id] = chat_histories[chat_id][-6:]

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π
    data = {
        "model": MODEL,
        "messages": chat_histories[chat_id],  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
        **GENERATION_PARAMS
    }

    print(f"\n[LOG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: {json.dumps(data, indent=2)}")

    try:
        response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=data)
        
        print(f"[LOG] –û—Ç–≤–µ—Ç API (—Å—Ç–∞—Ç—É—Å {response.status_code}): {response.text[:200]}...")  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥

        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ API: {response.status_code} {response.text}"

        response_json = response.json()
        
        if "choices" in response_json and response_json["choices"]:
            content = response_json["choices"][0]["message"].get("content", "").strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            chat_histories[chat_id].append({"role": "assistant", "content": content})
            chat_histories[chat_id] = chat_histories[chat_id][-6:]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 6 —Å–æ–æ–±—â–µ–Ω–∏–π

            return content if content else "–û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        else:
            return "–û—à–∏–±–∫–∞: API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."

    except requests.RequestException as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {e}")
        return f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: {str(e)}"

async def start(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é."""
    chat_id = update.message.chat_id
    chat_histories[chat_id] = []  # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    print(f"[LOG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start (–∏—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞)")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞ DeepSeek R1. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° –∏–ª–∏ —Ç–µ–≥–Ω–∏ –≤ –≥—Ä—É–ø–ø–µ (@–º–µ–Ω—è), –ª–∏–±–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π '–û—Ç–≤–µ—Ç–∏—Ç—å'!")

async def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–° –∏ –≥—Ä—É–ø–ø–∞—Ö (–µ—Å–ª–∏ –±–æ—Ç —Ç–µ–≥–Ω—É–ª–∏ –∏–ª–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏)."""
    user_text = update.message.text
    chat_type = update.message.chat.type
    chat_id = update.message.chat_id
    bot_username = context.bot.username

    print(f"[LOG] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_type} –æ—Ç {chat_id}: {user_text}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (reply_to_message)
    is_reply_to_bot = update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id if update.message.reply_to_message else False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–º —á–∞—Ç–µ –±–æ—Ç –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat_type == "private":
        print(f"[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –õ–°, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç.")
        response = chat_request(chat_id, user_text)
        await update.message.reply_text(response)
    
    elif chat_type in ["group", "supergroup"]:
        if f"@{bot_username}" in user_text or is_reply_to_bot:
            print(f"[LOG] –ë–æ—Ç–∞ —É–ø–æ–º—è–Ω—É–ª–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç.")
            clean_text = user_text.replace(f"@{bot_username}", "").strip()  # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            response = chat_request(chat_id, clean_text)
            await update.message.reply_text(response)
        else:
            print(f"[LOG] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç—É, –±–æ—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç.")

async def error_handler(update: Update, context: CallbackContext):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏."""
    print(f"[ERROR] –û—à–∏–±–∫–∞: {context.error}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))  
    app.add_error_handler(error_handler)

    print("[LOG] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –†–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°, –≤ –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    app.run_polling()

if __name__ == "__main__":
    main()
